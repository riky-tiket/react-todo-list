{"version":3,"sources":["todo/index.jsx","App.js","serviceWorker.js","index.js"],"names":["todo","props","handleClickParent","name","currentState","state","data","foreach","value","status","setState","handleClickChild","childName","parentName","subTodo","val","handleAddSubTodo","inputText","prompt","length","newSubTodo","push","clearTodo","addNewTodo","removeItem","newVal","this","className","onClick","map","list","key","sub","keys","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a0fcf9a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport map from 'lodash/map';\nimport foreach from 'lodash/forEach';\n\nimport './Styles.css';\n\nexport default class todo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [\n        {\n          name: 'memasak',\n          status: true,\n          subTodo: [\n            {\n              name: 'masak air',\n              status: true,\n            },\n            {\n              name: 'masak nasi',\n              status: true,\n            },\n          ]\n        },\n        {\n          name: 'belanja',\n          status: true,\n          subTodo: []\n        },\n        {\n          name: 'ngepel',\n          status: true,\n          subTodo: []\n        },\n        {\n          name: 'beberes rumah',\n          status: true,\n          subTodo: [\n            {\n              name: 'kamar mandi',\n              status: true,\n            },\n            {\n              name: 'ruang tamu',\n              status: true,\n            },\n          ]\n        },\n      ]\n    }\n  }\n\n  handleClickParent = name => {\n    let currentState = this.state.data;\n\n    foreach(currentState, function (value) {\n      if (value.name === name) {\n        value.status = !value.status;\n      }\n    })\n\n    this.setState({\n      data: currentState\n    })\n  }\n\n  handleClickChild = (childName, parentName) => {\n    let currentState = this.state.data;\n\n    foreach(currentState, function (value) {\n      if (value.name === parentName) {\n        foreach(value.subTodo, function (val) {\n          if (val.name === childName) {\n            val.status = !val.status;\n          }\n        })\n      }\n    })\n\n    this.setState({\n      data: currentState\n    })\n  }\n\n  handleAddSubTodo = name => {\n    let inputText = prompt('Tambah sub Todo');\n    if (inputText.length > 0) {\n      let currentState = this.state.data;\n      let newSubTodo = {\n        name: inputText,\n        status: true\n      };\n\n      foreach(currentState, function (value) {\n        if (value.name === name) {\n          value.subTodo.push(newSubTodo);\n        }\n      })\n\n      this.setState({\n        data: currentState\n      })\n    }\n  }\n\n  clearTodo = () => {\n    this.setState({\n      data: []\n    })\n  }\n\n  addNewTodo = () => {\n    let inputText = prompt('Tambah Todo Baru');\n    if (inputText.length > 0) {\n      let currentState = this.state.data;\n      let newSubTodo = {\n        name: inputText,\n        status: true,\n        subTodo: []\n      };\n\n      currentState.push(newSubTodo);\n\n      this.setState({\n        data: currentState\n      })\n    }\n  }\n\n  removeItem = (name) => {\n    let newVal = [];\n    let currentState = this.state.data;\n\n    foreach(currentState, function (value) {\n      if (value.name !== name) {\n        newVal.push(value)\n      }\n    })\n\n    this.setState({\n      data: newVal\n    })\n  }\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <div>\n        <div className=\"main-container\">\n          <div className=\"main-title\">\n            TODO\n          </div>\n          <div className=\"new-todo\" onClick={this.addNewTodo}>\n            Add New Todo\n          </div>\n          <div className=\"clear-todo\" onClick={this.clearTodo}>\n            Clear Todo List\n          </div>\n          {map(data, (list, key) => {\n            return (\n              <div key={key}>\n                <div\n                  onClick={() => this.handleClickParent(list.name)}\n                  className={!list.status ? 'todo-list todo-done' : 'todo-list'}\n                >\n                  <span>{key + 1} .</span>\n                  {list.name}\n                </div>\n                <div className=\"remove-todo\" onClick={() => this.removeItem(list.name)}>Hapus</div>\n                <div className=\"pull-right\" onClick={() => this.handleAddSubTodo(list.name)}><button>+</button></div>\n                {map(list.subTodo, (sub, keys) => {\n                  return (\n                    <div\n                      key={keys}\n                      onClick={() => this.handleClickChild(sub.name, list.name)}\n                      className={!sub.status ? 'todo-list sub-todo todo-done' : 'todo-list sub-todo'}\n                    >\n                      - {sub.name}\n                    </div>\n                  )\n                })}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Todo from './todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}